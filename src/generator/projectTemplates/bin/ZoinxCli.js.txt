#!/usr/bin/env node

const _ = require('lodash');
const AppConfig = require('../src/AppConfig');
const { Log } = require('zoinx/log');
const { ZoinxCli } = require('zoinx/cli');
const { KafkaClient } = require('zoinx/datastream');

class Zoinx extends ZoinxCli {

    constructor(process) {
        super(process);
        if (this.useDB) {
            AppConfig.initConfigCLI(this.envArg).catch((err) => {
                Log.error(err);
            });
            exports.db = require('../src/db');
        }
        else {
            AppConfig.initConfigNoDB(this.envArg).catch((err) => {
                Log.error(err);
            });
        }
        this.addInputs(
            {
                'run kafka consumer': {fn: 'runKafkaConsumer', desc: 'Run a simple Kafka consumer for a specified topic'},
                'rkc': {fn: 'runKafkaConsumer', desc: 'Run a simple Kafka consumer for a specified topic'}
            }
        )
    }

    async runKafkaConsumer(inputStr, _interface){
        let inputParts = inputStr.trim().split('--'),
            topic;

        try {
            if (!_.isEmpty(inputParts[1])) topic = inputParts[1];

            if (!_.isEmpty(topic)) {
                let kafkaClient = new KafkaClient('Telemetry', [AppConfig.get('TELEMETRY_MESSAGE_SERVERS')]);
                kafkaClient.setClientConfig('TELEMETRY_KAFKA',  AppConfig.get('TELEMETRY_ENV'), AppConfig.get('TELEMETRY_USE_SSL'));
                await kafkaClient.readMessage(topic);
            }
            else {
                Log.warn('No topic supplied to create a consumer for.');
            }
        }
        catch (e) {
            Log.error(e);
        }
    }

}

new Zoinx(process);
