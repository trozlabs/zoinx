version: "3.9"

name: \$\{COMPOSE_PROJECT_NAME\}

volumes:

  api-db-volume:
    name: \$\{SERVICE_NAME\}-api-db-volume-\$\{ENV\}
    driver: local

networks:
  default:
    name: \$\{SERVICE_NAME\}-default-network-\$\{ENV\}
  <%= projectName %>-network:
    name: \$\{SERVICE_NAME\}-network-\$\{ENV\}
    driver: bridge

services:

  <%= projectName %>-api:
    profiles: [ api ]
    platform: linux/amd64
    container_name: \$\{SERVICE_NAME\}-api-\$\{ENV\}
    hostname: <%= projectName %>-api
    build:
      context: .
      dockerfile: ./docker/node/Dockerfile
      args:
        ENV: \$\{ENV\}
        NODE_ENV: \$\{NODE_ENV\}
        PORT: \$\{PORT\}
    restart: unless-stopped
    command: npm run develop
    networks:
      - <%= projectName %>-network
    ports:
      - 3000:3000
      - 8080:8080
      - 9222:9222
      - 9229:9229
    volumes:
      - ./:/usr/src/app
    depends_on:
      - <%= projectName %>-db

  <%= projectName %>-db:
    profiles: [ database ]
    image: mongo
    container_name: \$\{SERVICE_NAME\}-db-\$\{ENV\}
    hostname: <%= projectName %>-db
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: \$\{MONGO_INITDB_ROOT_USERNAME\}
      MONGO_INITDB_ROOT_PASSWORD: \$\{MONGO_INITDB_ROOT_PASSWORD\}
      MONGO_INITDB_DATABASE: \$\{MONGO_INITDB_DATABASE\}
    networks:
      - <%= projectName %>-network
    ports:
      - 27017-27019:27017-27019
    volumes:
      - ./docker/mongo/init.js:/docker-entrypoint-initdb.d/init.js:ro
      - api-db-volume:/data/db

  # confluent services
  <%= projectName %>-broker:
    profiles: [ confluent ]
    image: confluentinc/cp-server:7.5.0
    hostname: broker
    container_name: \$\{SERVICE_NAME\}-broker-\$\{ENV\}
    ports:
        - "9092:9092"
        - "9101:9101"
    environment:
        KAFKA_NODE_ID: 1
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
        KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092'
        KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
        KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: 'broker:9092'
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
        KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
        KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
        KAFKA_JMX_PORT: 9101
        KAFKA_JMX_HOSTNAME: localhost
        KAFKA_PROCESS_ROLES: 'broker,controller'
        KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
        KAFKA_LISTENERS: 'PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092'
        KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
        KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
        KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
        KAFKA_CREATE_TOPICS: \$\{KAFKA_CREATE_TOPICS\}
        KAFKA_PARTITIONS_PER_TOPIC: \$\{KAFKA_PARTITIONS_PER_TOPIC\}
        # Replace CLUSTER_ID with a unique base64 UUID using "bin/kafka-storage.sh random-uuid"
        # See https://docs.confluent.io/kafka/operations-tools/kafka-tools.html#kafka-storage-sh
        CLUSTER_ID: 'q1Sh-9_ISia_zwGINzRvyQ'
        command: "
            # block until kafka is reachable
            kafka-topics.sh --bootstrap-server broker:9092 --list
            echo -e 'Creating Kafka topics'

            kafka-topics.sh --bootstrap-server broker:9092 --create --if-not-exists --topic z-logging-stream --replication-factor 1 --partitions 3
            kafka-topics.sh --bootstrap-server broker:9092 --create --if-not-exists --topic z-telemetry-stream --replication-factor 1 --partitions 3
            kafka-topics.sh --bootstrap-server broker:9092 --create --if-not-exists --topic z-testing-stream --replication-factor 1 --partitions 3

            echo -e 'Successfully create the following topics:'
            kafka-topics.sh --bootstrap-server broker:9092 --list"
    networks:
        - <%= projectName %>-network

  <%= projectName %>-schema-registry:
    profiles: [ confluent ]
    image: confluentinc/cp-schema-registry:7.5.0
    hostname: schema-registry
    container_name: \$\{SERVICE_NAME\}-schema-registry-\$\{ENV\}
    depends_on:
        - <%= projectName %>-broker
    ports:
        - "8081:8081"
    environment:
        SCHEMA_REGISTRY_HOST_NAME: schema-registry
        SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
        SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
        - <%= projectName %>-network

  <%= projectName %>-connect:
    profiles: [ confluent ]
    image: cnfldemos/cp-server-connect-datagen:0.6.2-7.5.0
    hostname: connect
    container_name: \$\{SERVICE_NAME\}-connect-\$\{ENV\}
    depends_on:
        - <%= projectName %>-broker
        - <%= projectName %>-schema-registry
    ports:
        - "8083:8083"
    environment:
        CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
        CONNECT_REST_ADVERTISED_HOST_NAME: connect
        CONNECT_GROUP_ID: compose-connect-group
        CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
        CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
        CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
        CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
        CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
        CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
        CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
        CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
        CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
        CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
        # CLASSPATH required due to CC-2422
        CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.5.0.jar
        CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
        CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
        CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
        CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    networks:
        - <%= projectName %>-network

  <%= projectName %>-control-center:
    profiles: [ confluent ]
    image: confluentinc/cp-enterprise-control-center:7.5.0
    hostname: control-center
    container_name: \$\{SERVICE_NAME\}-control-center-\$\{ENV\}
    depends_on:
        - <%= projectName %>-broker
        - <%= projectName %>-schema-registry
        - <%= projectName %>-connect
        - <%= projectName %>-ksqldb-server
    ports:
        - "9021:9021"
    environment:
        CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
        CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'connect:8083'
        CONTROL_CENTER_CONNECT_HEALTHCHECK_ENDPOINT: '/connectors'
        CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
        CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
        CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
        CONTROL_CENTER_REPLICATION_FACTOR: 1
        CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
        CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
        CONFLUENT_METRICS_TOPIC_REPLICATION: 1
        PORT: 9021
    networks:
        - <%= projectName %>-network

  <%= projectName %>-ksqldb-server:
    profiles: [ confluent ]
    image: confluentinc/cp-ksqldb-server:7.5.0
    hostname: ksqldb-server
    container_name: \$\{SERVICE_NAME\}-ksqldb-server-\$\{ENV\}
    depends_on:
        - <%= projectName %>-broker
        - <%= projectName %>-connect
    ports:
        - "8088:8088"
    environment:
        KSQL_CONFIG_DIR: "/etc/ksql"
        KSQL_BOOTSTRAP_SERVERS: "broker:29092"
        KSQL_HOST_NAME: ksqldb-server
        KSQL_LISTENERS: "http://0.0.0.0:8088"
        KSQL_CACHE_MAX_BYTES_BUFFERING: 0
        KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
        KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
        KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
        KSQL_KSQL_CONNECT_URL: "http://connect:8083"
        KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
        KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
        KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'
    networks:
        - <%= projectName %>-network

  <%= projectName %>-ksqldb-cli:
    profiles: [ confluent ]
    image: confluentinc/cp-ksqldb-cli:7.5.0
    container_name: \$\{SERVICE_NAME\}-ksqldb-cli-\$\{ENV\}
    depends_on:
        - <%= projectName %>-broker
        - <%= projectName %>-connect
        - <%= projectName %>-ksqldb-server
    entrypoint: /bin/sh
    tty: true
    networks:
        - <%= projectName %>-network

  <%= projectName %>-ksql-datagen:
    profiles: [ confluent ]
    image: confluentinc/ksqldb-examples:7.5.0
    hostname: ksql-datagen
    container_name: \$\{SERVICE_NAME\}-ksql-datagen-\$\{ENV\}
    depends_on:
        - <%= projectName %>-ksqldb-server
        - <%= projectName %>-broker
        - <%= projectName %>-schema-registry
        - <%= projectName %>-connect
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b broker:29092 1 40 && \
                       echo Waiting for Confluent Schema Registry to be ready... && \
                       cub sr-ready schema-registry 8081 40 && \
                       echo Waiting a few seconds for topic creation to finish... && \
                       sleep 11 && \
                       tail -f /dev/null'"
    environment:
        KSQL_CONFIG_DIR: "/etc/ksql"
        STREAMS_BOOTSTRAP_SERVERS: broker:29092
        STREAMS_SCHEMA_REGISTRY_HOST: schema-registry
        STREAMS_SCHEMA_REGISTRY_PORT: 8081
    networks:
        - <%= projectName %>-network

  <%= projectName %>-rest-proxy:
    profiles: [ confluent ]
    image: confluentinc/cp-kafka-rest:7.5.0
    depends_on:
        - <%= projectName %>-broker
        - <%= projectName %>-schema-registry
    ports:
        - 8082:8082
    hostname: rest-proxy
    container_name: \$\{SERVICE_NAME\}-rest-proxy-\$\{ENV\}
    environment:
        KAFKA_REST_HOST_NAME: rest-proxy
        KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:29092'
        KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
        KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
    networks:
        - <%= projectName %>-network
